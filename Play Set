void setup() { 
  size(400, 400); 
  
} 

var deck = [];
var cardsOut = [];
var chosenCards =[];
var cardOrderX =0;
var cardOrderY=0;
var cardHeight = 75;
var cardWidth =50;
var drawn =0;
var count =0;
var amount = 0;
var fillAmount =0;
var shapeCheck =false;
var amountCheck =false;
var colorCheck = false;
var fillCheck =false;
var columns = 4;
var score=0;
var sets =20;
var unstarted =true;

//set up for cards
var Cards = function(x,y,number,clicked){
    this.x =x;
    this.y =y;
    this.number =number;
    this.clicked=false;
};
//draw the cards that are out
Cards.prototype.opacity = function(){
    //get opacity.
    if(this.number%3===0){
        return 255;
    }
    else if(this.number%3===1){
        return 50;
    }
    else{
        return 0;
    }
};
Cards.prototype.colors = function(){
     if((ceil(this.number/3))%3===0){
        return [8,107,8,23,135,13];
    }
    else if((ceil(this.number/3))%3===1){
        return[0,17,255,17,0,255];
    }
    else{
        return [255,68,0,255,0,0];
    }
};
Cards.prototype.amount = function(){
    if(ceil(this.number/9)%3===1){
        return 1;
    }
    else if(ceil(this.number/9)%3===2){
         return 2;
    }
    else{
        return 3;
    }
};
Cards.prototype.shape =function(){
    //the shape
    //rectangle
    if(this.number<28){
       return "rectangle";
    }
    //circle
    else if(this.number>54){
       return "circle";
    }
    //triangle
    else{
       return "triangle";
    }
    
};
Cards.prototype.draws = function(cardOrderX,cardOrderY) {
    fill(240, 231, 231);
    stroke(112, 105, 111);
    strokeWeight(1);
    this.x =50+cardOrderX*cardWidth*1.5;
    this.y =50+cardOrderY*cardHeight*1.5;
    rect(this.x, this.y,cardWidth,cardHeight);
    fill(255, 0, 0);
    //text(this.number,75+cardOrderX*cardWidth*1.5,80+cardOrderY*cardHeight*1.5);
    
    if(this.clicked===true){
        noFill();
        stroke(255, 0, 230);
        rect(this.x,this.y,cardWidth,cardHeight);
    }
    //get all the characteristics of the card from its number
    strokeWeight(2);
    //amount of shapes.
    amount = this.amount();
    //set opacity
    fillAmount= this.opacity();
    //set fill color
    stroke(this.colors()[0], this.colors()[1], this.colors()[2]);
    fill(this.colors()[3], this.colors()[4], this.colors()[5],fillAmount);
    
    //the shape
    //rectangle
    if(this.shape()==="rectangle"){
       for(var i =0; i<amount;i++){
           rect(10+this.x+10*i, 30+this.y,10,10);
       }
    }
    //circle
    else if(this.shape()==="circle"){
       for(var i =0; i<amount;i++){
           ellipse(10+this.x+10*i, 37+this.y,10,10);
       }
    }
    //triangle
    else{
       for(var i =0; i<amount;i++){
           triangle(15+this.x+10*i, 30+this.y,22+this.x+10*i,40+this.y,10+this.x+10*i,40+this.y);
       }
    }
    
};

//check if clicked cards have any matches
var drawCards = function(){
    for(var i =cardsOut.length-1; i>-1;i--){
            if(cardsOut[i].clicked===true&&chosenCards.length>2){
                cardsOut.splice(i,1);
                if(columns===4){
                drawn = round(random(0, deck.length-1));
                cardsOut.push(deck[drawn]);
                deck.splice(drawn,1);}
                columns=4;
            }
        }
    for(var i=cardsOut.length; i< 3*columns; i++){
        drawn = round(random(0, deck.length-1));
                cardsOut.push(deck[drawn]);
                deck.splice(drawn,1);
                score-=5;
    }
        chosenCards.splice(0,chosenCards.length);
        if(columns===4){
        score+=10;
        sets-=1;
        }
};
var matches = function(){
    shapeCheck=false;
    fillCheck=false;
    colorCheck=false;
    amountCheck=false;
    //all different or all the same opacity?
    if(chosenCards[0].opacity() === chosenCards[1].opacity()){
        if(chosenCards[0].opacity() === chosenCards[2].opacity()){
            fillCheck=true;
        }
    }
    else{
        if(chosenCards[0].opacity() !== chosenCards[2].opacity()&&chosenCards[1].opacity()!==chosenCards[2].opacity()){
            fillCheck=true;
         }
    }
    //all different or all the same amount?
    if(chosenCards[0].amount() === chosenCards[1].amount()){
        if(chosenCards[0].amount() === chosenCards[2].amount()){
            amountCheck=true;
        }
    }
    else{
        if(chosenCards[0].amount() !== chosenCards[2].amount()&&chosenCards[1].amount() !==chosenCards[2].amount()){
            amountCheck=true;
         }
    }
    //all different or all the same color?
    if(chosenCards[0].colors()[0] === chosenCards[1].colors()[0]){
        if(chosenCards[0].colors()[0] === chosenCards[2].colors()[0]){
            colorCheck=true;
        }
    }
    else{
        if(chosenCards[0].colors()[0] !== chosenCards[2].colors()[0]&&chosenCards[1].colors()[0] !==chosenCards[2].colors()[0]){
            colorCheck=true;
         }
    }
    //all different or all the same shape?
    if(chosenCards[0].shape() === chosenCards[1].shape()){
        if(chosenCards[0].shape() === chosenCards[2].shape()){
            shapeCheck=true;
        }
    }
    else{
        if(chosenCards[0].shape() !== chosenCards[2].shape()&&chosenCards[1].shape() !==chosenCards[2].shape()){
            shapeCheck=true;
         }
    }
    
    //DO YOU HAVE SET?
    if(shapeCheck&&colorCheck&&fillCheck&&amountCheck){
        drawCards();
    }
    else{
        chosenCards.splice(0,chosenCards.length);
        score-=10;
    }
};

//note when cards are chosen and add them to the list of chosen cards
void mouseClicked(){
    unstarted=false;
    for(var i=0; i< cardsOut.length;i++){
        if(mouseX>cardsOut[i].x&&mouseX<cardsOut[i].x + cardWidth && mouseY > cardsOut[i].y && mouseY< cardsOut[i].y+cardHeight&&cardsOut[i].clicked===false){
            cardsOut[i].clicked=true;
            chosenCards.push(cardsOut[i]);
            //text(chosenCards,10,10);
        }
    }
   
    if(chosenCards.length===3){
        matches();
        for(var i=0; i<cardsOut.length;i++){
                cardsOut[i].clicked=false;
        }
    }
    if(mouseX>350&&mouseY<50){
        columns=5;
        drawCards();
    }
};

//make the deck of cards
for (var i =1; i<=81;i++){
    deck.push(new Cards(-500,-500,i,false));
}

//get the first hand
for(var i =11; i>=0; i--){
    drawn = round(random(0, deck.length-1));
    cardsOut.push(deck[drawn]);
    deck.splice(drawn,1);
}

void draw() {
//send out the cards
if(unstarted===false){
    count=0;
    
    //text(cardsOut.length,200,20);
    background(255, 249, 66);
    fill(68, 255, 0);
    rect(350,0,50,50);
    fill(0, 0, 0);
    text("More\ncards",348,19);
    //text(cardsOut.length,200,20);
    for (var i = 0; i< columns; i++){
        for(var j =0; j<3;j++){
            cardsOut[count].draws(i,j);
            count+=1;
        }
    }
    fill(3, 3, 3);
    textSize(20);
    text("Score: "+ score,20,20);
    text(sets + " sets remain", 150,20);
}
    if(unstarted===true){
        background(34, 39, 89);
        fill(240, 240, 237);
        textSize(22);
        text("Set!", 100,100);
        text("Every card has 4 characteristics:\n shape, amount of shapes, amount it's \nfilled in and color.\n Form a set by finding any 3 cards \nwhere for each of these characteristics \nthey are all the same, or all different.\n\nClick to Start!",10,150);
    }
    if(sets === 0){
        background(0, 0, 0);
        fill(241, 242, 237);
        text("Congrats! You got a score of " + score,13,100);
    }
    
};
    
